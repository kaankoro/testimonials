{
  "version": 3,
  "sources": ["../../../../vidstack/dev/providers/vidstack-google-cast.js"],
  "sourcesContent": ["import { l as listenEvent, g as effect, V as untrack, t as createScope, x as keysOf, r as onDispose, D as DOMEvent, p as peek } from '../chunks/vidstack-CPyWhQNM.js';\nimport { T as TimeRange } from '../chunks/vidstack-CCzOi1rX.js';\nimport { R as RAFLoop } from '../chunks/vidstack-Dof10RKL.js';\nimport { L as ListSymbol } from '../chunks/vidstack-CnaYRoc3.js';\nimport { f as getCastSessionMedia, g as getCastContext, a as getCastSession, j as hasActiveCastSession, l as listenCastContextEvent, c as getCastErrorMessage } from '../chunks/vidstack-C2NQ3nXZ.js';\n\nclass GoogleCastMediaInfoBuilder {\n  constructor(src) {\n    this._info = new chrome.cast.media.MediaInfo(src.src, src.type);\n  }\n  build() {\n    return this._info;\n  }\n  _setStreamType(streamType) {\n    if (streamType.includes(\"live\")) {\n      this._info.streamType = chrome.cast.media.StreamType.LIVE;\n    } else {\n      this._info.streamType = chrome.cast.media.StreamType.BUFFERED;\n    }\n    return this;\n  }\n  _setTracks(tracks) {\n    this._info.tracks = tracks.map(this._buildCastTrack);\n    return this;\n  }\n  _setMetadata(title, poster) {\n    this._info.metadata = new chrome.cast.media.GenericMediaMetadata();\n    this._info.metadata.title = title;\n    this._info.metadata.images = [{ url: poster }];\n    return this;\n  }\n  _buildCastTrack(track, trackId) {\n    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);\n    castTrack.name = track.label;\n    castTrack.trackContentId = track.src;\n    castTrack.trackContentType = \"text/vtt\";\n    castTrack.language = track.language;\n    castTrack.subtype = track.kind.toUpperCase();\n    return castTrack;\n  }\n}\n\nconst REMOTE_TRACK_TEXT_TYPE = chrome.cast.media.TrackType.TEXT, REMOTE_TRACK_AUDIO_TYPE = chrome.cast.media.TrackType.AUDIO;\nclass GoogleCastTracksManager {\n  constructor(_cast, _ctx, _onNewLocalTracks) {\n    this._cast = _cast;\n    this._ctx = _ctx;\n    this._onNewLocalTracks = _onNewLocalTracks;\n  }\n  _setup() {\n    const syncRemoteActiveIds = this._syncRemoteActiveIds.bind(this);\n    listenEvent(this._ctx.audioTracks, \"change\", syncRemoteActiveIds);\n    listenEvent(this._ctx.textTracks, \"mode-change\", syncRemoteActiveIds);\n    effect(this._syncLocalTracks.bind(this));\n  }\n  _getLocalTextTracks() {\n    return this._ctx.$state.textTracks().filter((track) => track.src && track.type === \"vtt\");\n  }\n  _getLocalAudioTracks() {\n    return this._ctx.$state.audioTracks();\n  }\n  _getRemoteTracks(type) {\n    const tracks = this._cast.mediaInfo?.tracks ?? [];\n    return type ? tracks.filter((track) => track.type === type) : tracks;\n  }\n  _getRemoteActiveIds() {\n    const activeIds = [], activeLocalAudioTrack = this._getLocalAudioTracks().find((track) => track.selected), activeLocalTextTracks = this._getLocalTextTracks().filter(\n      (track) => track.mode === \"showing\"\n    );\n    if (activeLocalAudioTrack) {\n      const remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteAudioTrack = this._findRemoteTrack(remoteAudioTracks, activeLocalAudioTrack);\n      if (remoteAudioTrack)\n        activeIds.push(remoteAudioTrack.trackId);\n    }\n    if (activeLocalTextTracks?.length) {\n      const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n      if (remoteTextTracks.length) {\n        for (const localTrack of activeLocalTextTracks) {\n          const remoteTextTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n          if (remoteTextTrack)\n            activeIds.push(remoteTextTrack.trackId);\n        }\n      }\n    }\n    return activeIds;\n  }\n  _syncLocalTracks() {\n    const localTextTracks = this._getLocalTextTracks();\n    if (!this._cast.isMediaLoaded)\n      return;\n    const remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n    for (const localTrack of localTextTracks) {\n      const hasRemoteTrack = this._findRemoteTrack(remoteTextTracks, localTrack);\n      if (!hasRemoteTrack) {\n        untrack(() => this._onNewLocalTracks?.());\n        break;\n      }\n    }\n  }\n  _syncRemoteTracks(event) {\n    if (!this._cast.isMediaLoaded)\n      return;\n    const localAudioTracks = this._getLocalAudioTracks(), localTextTracks = this._getLocalTextTracks(), remoteAudioTracks = this._getRemoteTracks(REMOTE_TRACK_AUDIO_TYPE), remoteTextTracks = this._getRemoteTracks(REMOTE_TRACK_TEXT_TYPE);\n    for (const remoteAudioTrack of remoteAudioTracks) {\n      const hasLocalTrack = this._findLocalTrack(localAudioTracks, remoteAudioTrack);\n      if (hasLocalTrack)\n        continue;\n      const localAudioTrack = {\n        id: remoteAudioTrack.trackId.toString(),\n        label: remoteAudioTrack.name,\n        language: remoteAudioTrack.language,\n        kind: remoteAudioTrack.subtype ?? \"main\",\n        selected: false\n      };\n      this._ctx.audioTracks[ListSymbol._add](localAudioTrack, event);\n    }\n    for (const remoteTextTrack of remoteTextTracks) {\n      const hasLocalTrack = this._findLocalTrack(localTextTracks, remoteTextTrack);\n      if (hasLocalTrack)\n        continue;\n      const localTextTrack = {\n        id: remoteTextTrack.trackId.toString(),\n        src: remoteTextTrack.trackContentId,\n        label: remoteTextTrack.name,\n        language: remoteTextTrack.language,\n        kind: remoteTextTrack.subtype.toLowerCase()\n      };\n      this._ctx.textTracks.add(localTextTrack, event);\n    }\n  }\n  _syncRemoteActiveIds(event) {\n    if (!this._cast.isMediaLoaded)\n      return;\n    const activeIds = this._getRemoteActiveIds(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);\n    this._editTracksInfo(editRequest).catch((error) => {\n      {\n        this._ctx.logger?.errorGroup(\"[vidstack] failed to edit cast tracks info\").labelledLog(\"Edit Request\", editRequest).labelledLog(\"Error\", error).dispatch();\n      }\n    });\n  }\n  _editTracksInfo(request) {\n    const media = getCastSessionMedia();\n    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));\n  }\n  _findLocalTrack(localTracks, remoteTrack) {\n    return localTracks.find((localTrack) => this._isMatch(localTrack, remoteTrack));\n  }\n  _findRemoteTrack(remoteTracks, localTrack) {\n    return remoteTracks.find((remoteTrack) => this._isMatch(localTrack, remoteTrack));\n  }\n  // Note: we can't rely on id matching because they will differ between local/remote. A local\n  // track id might not even exist.\n  _isMatch(localTrack, remoteTrack) {\n    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();\n  }\n}\n\nclass GoogleCastProvider {\n  constructor(_player, _ctx) {\n    this._player = _player;\n    this._ctx = _ctx;\n    this.$$PROVIDER_TYPE = \"GOOGLE_CAST\";\n    this.scope = createScope();\n    this._currentSrc = null;\n    this._state = \"disconnected\";\n    this._currentTime = 0;\n    this._played = 0;\n    this._playedRange = new TimeRange(0, 0);\n    this._seekableRange = new TimeRange(0, 0);\n    this._timeRAF = new RAFLoop(this._onAnimationFrame.bind(this));\n    this._reloadInfo = null;\n    this._isIdle = false;\n    this._tracks = new GoogleCastTracksManager(\n      this._player,\n      this._ctx,\n      this._onNewLocalTracks.bind(this)\n    );\n  }\n  get _notify() {\n    return this._ctx.delegate._notify;\n  }\n  get type() {\n    return \"google-cast\";\n  }\n  get currentSrc() {\n    return this._currentSrc;\n  }\n  /**\n   * The Google Cast remote player.\n   *\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}\n   */\n  get player() {\n    return this._player;\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}\n   */\n  get session() {\n    return getCastSession();\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}\n   */\n  get media() {\n    return getCastSessionMedia();\n  }\n  /**\n   * Whether the current Google Cast session belongs to this provider.\n   */\n  get hasActiveSession() {\n    return hasActiveCastSession(this._currentSrc);\n  }\n  setup() {\n    this._attachCastContextEventListeners();\n    this._attachCastPlayerEventListeners();\n    this._tracks._setup();\n    this._notify(\"provider-setup\", this);\n  }\n  _attachCastContextEventListeners() {\n    listenCastContextEvent(\n      cast.framework.CastContextEventType.CAST_STATE_CHANGED,\n      this._onCastStateChange.bind(this)\n    );\n  }\n  _attachCastPlayerEventListeners() {\n    const Event2 = cast.framework.RemotePlayerEventType, handlers = {\n      [Event2.IS_CONNECTED_CHANGED]: this._onCastStateChange,\n      [Event2.IS_MEDIA_LOADED_CHANGED]: this._onMediaLoadedChange,\n      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this._onCanControlVolumeChange,\n      [Event2.CAN_SEEK_CHANGED]: this._onCanSeekChange,\n      [Event2.DURATION_CHANGED]: this._onDurationChange,\n      [Event2.IS_MUTED_CHANGED]: this._onVolumeChange,\n      [Event2.VOLUME_LEVEL_CHANGED]: this._onVolumeChange,\n      [Event2.IS_PAUSED_CHANGED]: this._onPausedChange,\n      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this._onProgress,\n      [Event2.PLAYER_STATE_CHANGED]: this._onPlayerStateChange\n    };\n    this._playerEventHandlers = handlers;\n    const handler = this._onRemotePlayerEvent.bind(this);\n    for (const type of keysOf(handlers)) {\n      this._player.controller.addEventListener(type, handler);\n    }\n    onDispose(() => {\n      for (const type of keysOf(handlers)) {\n        this._player.controller.removeEventListener(type, handler);\n      }\n    });\n  }\n  async play() {\n    if (!this._player.isPaused && !this._isIdle)\n      return;\n    if (this._isIdle) {\n      await this._reload(false, 0);\n      return;\n    }\n    this._player.controller?.playOrPause();\n  }\n  async pause() {\n    if (this._player.isPaused)\n      return;\n    this._player.controller?.playOrPause();\n  }\n  getMediaStatus(request) {\n    return new Promise((resolve, reject) => {\n      this.media?.getStatus(request, resolve, reject);\n    });\n  }\n  setMuted(muted) {\n    const hasChanged = muted && !this._player.isMuted || !muted && this._player.isMuted;\n    if (hasChanged)\n      this._player.controller?.muteOrUnmute();\n  }\n  setCurrentTime(time) {\n    this._player.currentTime = time;\n    this._notify(\"seeking\", time);\n    this._player.controller?.seek();\n  }\n  setVolume(volume) {\n    this._player.volumeLevel = volume;\n    this._player.controller?.setVolumeLevel();\n  }\n  async loadSource(src) {\n    if (this._reloadInfo?.src !== src)\n      this._reloadInfo = null;\n    if (hasActiveCastSession(src)) {\n      this._resumeSession();\n      this._currentSrc = src;\n      return;\n    }\n    this._notify(\"load-start\");\n    const loadRequest = this._buildLoadRequest(src), errorCode = await this.session.loadMedia(loadRequest);\n    if (errorCode) {\n      this._currentSrc = null;\n      this._notify(\"error\", Error(getCastErrorMessage(errorCode)));\n      return;\n    }\n    this._currentSrc = src;\n  }\n  destroy() {\n    this._reset();\n    this._endSession();\n  }\n  _reset() {\n    if (!this._reloadInfo) {\n      this._played = 0;\n      this._playedRange = new TimeRange(0, 0);\n      this._seekableRange = new TimeRange(0, 0);\n    }\n    this._timeRAF._stop();\n    this._currentTime = 0;\n    this._reloadInfo = null;\n  }\n  _resumeSession() {\n    const resumeSessionEvent = new DOMEvent(\"resume-session\", { detail: this.session });\n    this._onMediaLoadedChange(resumeSessionEvent);\n    const { muted, volume, savedState } = this._ctx.$state, localState = savedState();\n    this.setCurrentTime(Math.max(this._player.currentTime, localState?.currentTime ?? 0));\n    this.setMuted(muted());\n    this.setVolume(volume());\n    if (localState?.paused === false)\n      this.play();\n  }\n  _endSession() {\n    this.cast.endCurrentSession(true);\n    const { remotePlaybackLoader } = this._ctx.$state;\n    remotePlaybackLoader.set(null);\n  }\n  _disconnectFromReceiver() {\n    const { savedState } = this._ctx.$state;\n    savedState.set({\n      paused: this._player.isPaused,\n      currentTime: this._player.currentTime\n    });\n    this._endSession();\n  }\n  _onAnimationFrame() {\n    this._onCurrentTimeChange();\n  }\n  _onRemotePlayerEvent(event) {\n    this._playerEventHandlers[event.type].call(this, event);\n  }\n  _onCastStateChange(data) {\n    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? \"connected\" : castState === cast.framework.CastState.CONNECTING ? \"connecting\" : \"disconnected\";\n    if (this._state === state)\n      return;\n    const detail = { type: \"google-cast\", state }, trigger = this._createEvent(data);\n    this._state = state;\n    this._notify(\"remote-playback-change\", detail, trigger);\n    if (state === \"disconnected\") {\n      this._disconnectFromReceiver();\n    }\n  }\n  _onMediaLoadedChange(event) {\n    const hasLoaded = !!this._player.isMediaLoaded;\n    if (!hasLoaded)\n      return;\n    const src = peek(this._ctx.$state.source);\n    Promise.resolve().then(() => {\n      if (src !== peek(this._ctx.$state.source) || !this._player.isMediaLoaded)\n        return;\n      this._reset();\n      const duration = this._player.duration;\n      this._seekableRange = new TimeRange(0, duration);\n      const detail = {\n        provider: this,\n        duration,\n        buffered: this._playedRange,\n        seekable: this._getSeekableRange()\n      }, trigger = this._createEvent(event);\n      this._notify(\"loaded-metadata\", void 0, trigger);\n      this._notify(\"loaded-data\", void 0, trigger);\n      this._notify(\"can-play\", detail, trigger);\n      this._onCanControlVolumeChange();\n      this._onCanSeekChange(event);\n      const { volume, muted } = this._ctx.$state;\n      this.setVolume(volume());\n      this.setMuted(muted());\n      this._timeRAF._start();\n      this._tracks._syncRemoteTracks(trigger);\n      this._tracks._syncRemoteActiveIds(trigger);\n    });\n  }\n  _onCanControlVolumeChange() {\n    this._ctx.$state.canSetVolume.set(this._player.canControlVolume);\n  }\n  _onCanSeekChange(event) {\n    const trigger = this._createEvent(event);\n    this._notify(\"stream-type-change\", this._getStreamType(), trigger);\n  }\n  _getStreamType() {\n    const streamType = this._player.mediaInfo?.streamType;\n    return streamType === chrome.cast.media.StreamType.LIVE ? this._player.canSeek ? \"live:dvr\" : \"live\" : \"on-demand\";\n  }\n  _onCurrentTimeChange() {\n    if (this._reloadInfo)\n      return;\n    const currentTime = this._player.currentTime;\n    if (currentTime === this._currentTime)\n      return;\n    const prevPlayed = this._played, played = this._getPlayedRange(currentTime), detail = { currentTime, played };\n    this._notify(\"time-update\", detail);\n    if (currentTime > prevPlayed)\n      this._onProgress();\n    if (this._ctx.$state.seeking()) {\n      this._notify(\"seeked\", currentTime);\n    }\n    this._currentTime = currentTime;\n  }\n  _getPlayedRange(time) {\n    return this._played >= time ? this._playedRange : this._playedRange = new TimeRange(0, this._played = time);\n  }\n  _onDurationChange(event) {\n    if (!this._player.isMediaLoaded || this._reloadInfo)\n      return;\n    const duration = this._player.duration, trigger = this._createEvent(event);\n    this._seekableRange = new TimeRange(0, duration);\n    this._notify(\"duration-change\", duration, trigger);\n  }\n  _onVolumeChange(event) {\n    if (!this._player.isMediaLoaded)\n      return;\n    const detail = {\n      muted: this._player.isMuted,\n      volume: this._player.volumeLevel\n    }, trigger = this._createEvent(event);\n    this._notify(\"volume-change\", detail, trigger);\n  }\n  _onPausedChange(event) {\n    const trigger = this._createEvent(event);\n    if (this._player.isPaused) {\n      this._notify(\"pause\", void 0, trigger);\n    } else {\n      this._notify(\"play\", void 0, trigger);\n    }\n  }\n  _onProgress(event) {\n    const detail = {\n      seekable: this._getSeekableRange(),\n      buffered: this._playedRange\n    }, trigger = event ? this._createEvent(event) : void 0;\n    this._notify(\"progress\", detail, trigger);\n  }\n  _onPlayerStateChange(event) {\n    const state = this._player.playerState, PlayerState = chrome.cast.media.PlayerState;\n    this._isIdle = state === PlayerState.IDLE;\n    if (state === PlayerState.PAUSED)\n      return;\n    const trigger = this._createEvent(event);\n    switch (state) {\n      case PlayerState.PLAYING:\n        this._notify(\"playing\", void 0, trigger);\n        break;\n      case PlayerState.BUFFERING:\n        this._notify(\"waiting\", void 0, trigger);\n        break;\n      case PlayerState.IDLE:\n        this._timeRAF._stop();\n        this._notify(\"pause\");\n        this._notify(\"end\");\n        break;\n    }\n  }\n  _getSeekableRange() {\n    return this._player.liveSeekableRange ? new TimeRange(this._player.liveSeekableRange.start, this._player.liveSeekableRange.end) : this._seekableRange;\n  }\n  _createEvent(detail) {\n    return detail instanceof Event ? detail : new DOMEvent(detail.type, { detail });\n  }\n  _buildMediaInfo(src) {\n    const { streamType, title, poster } = this._ctx.$state;\n    return new GoogleCastMediaInfoBuilder(src)._setMetadata(title(), poster())._setStreamType(streamType())._setTracks(this._tracks._getLocalTextTracks()).build();\n  }\n  _buildLoadRequest(src) {\n    const mediaInfo = this._buildMediaInfo(src), request = new chrome.cast.media.LoadRequest(mediaInfo), savedState = this._ctx.$state.savedState();\n    request.autoplay = (this._reloadInfo?.paused ?? savedState?.paused) === false;\n    request.currentTime = this._reloadInfo?.time ?? savedState?.currentTime ?? 0;\n    return request;\n  }\n  async _reload(paused, time) {\n    const src = peek(this._ctx.$state.source);\n    this._reloadInfo = { src, paused, time };\n    await this.loadSource(src);\n  }\n  _onNewLocalTracks() {\n    this._reload(this._player.isPaused, this._player.currentTime).catch((error) => {\n      {\n        this._ctx.logger?.errorGroup(\"[vidstack] cast failed to load new local tracks\").labelledLog(\"Error\", error).dispatch();\n      }\n    });\n  }\n}\n\nexport { GoogleCastProvider };\n"],
  "mappings": "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",
  "names": []
}
