import {
  AirPlayButton,
  AudioGainRadioGroup,
  AudioGainSlider,
  AudioRadioGroup,
  CaptionButton,
  Captions,
  CaptionsRadioGroup,
  ChaptersRadioGroup,
  Controls,
  FocusVisibleController,
  FullscreenButton,
  Gesture,
  GoogleCastButton,
  LiveButton,
  MediaAnnouncer,
  Menu,
  MenuButton,
  MenuItems,
  MenuPortal,
  MuteButton,
  PIPButton,
  PlayButton,
  Poster,
  QualityRadioGroup,
  QualitySlider,
  Radio,
  RadioGroup,
  SeekButton,
  Slider,
  SliderChapters,
  SliderPreview,
  SliderValue,
  SliderVideo,
  SpeedRadioGroup,
  SpeedSlider,
  Thumbnail,
  Time,
  TimeSlider,
  ToggleButton,
  Tooltip,
  TooltipContent,
  VolumeSlider,
  sliderState,
  tooltipContext
} from "./chunk-KJ5HVKEK.js";
import {
  LitElement,
  html
} from "./chunk-PVDNJ5ZA.js";
import {
  useMediaContext
} from "./chunk-2UFRPTHX.js";
import {
  cloneTemplate,
  cloneTemplateContent,
  createTemplate,
  isHTMLElement,
  requestScopedAnimationFrame
} from "./chunk-2DT7CZMU.js";
import {
  watchCueTextChange
} from "./chunk-TS4CRK55.js";
import {
  BOOLEAN,
  Component,
  Host,
  computed,
  effect,
  isBoolean,
  isString,
  onDispose,
  setAttribute,
  setStyle,
  signal,
  useContext,
  useState
} from "./chunk-2H3ESF2I.js";

// node_modules/vidstack/dev/chunks/vidstack-uKh2Txc9.js
var ControlsGroup = class extends Component {
  onAttach(el) {
    if (!el.style.pointerEvents)
      setStyle(el, "pointer-events", "auto");
  }
};
var TooltipTrigger = class extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  onConnect(el) {
    onDispose(
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        this._attach();
        const tooltip = useContext(tooltipContext);
        onDispose(() => {
          const button = this._getButton();
          button && tooltip._detachTrigger(button);
        });
      })
    );
  }
  _attach() {
    const button = this._getButton(), tooltip = useContext(tooltipContext);
    button && tooltip._attachTrigger(button);
  }
  _getButton() {
    const candidate = this.el.firstElementChild;
    return (candidate == null ? void 0 : candidate.localName) === "button" || (candidate == null ? void 0 : candidate.getAttribute("role")) === "button" ? candidate : this.el;
  }
};

// node_modules/vidstack/dev/chunks/vidstack-CKb09lRF.js
var MenuItem = class extends MenuButton {
};

// node_modules/vidstack/dev/chunks/vidstack-BIdsPB6u.js
var imgTemplate = createTemplate(
  '<img loading="eager" decoding="async" aria-hidden="true">'
);
var _MediaThumbnailElement = class _MediaThumbnailElement extends Host(HTMLElement, Thumbnail) {
  constructor() {
    super(...arguments);
    this._img = this._createImg();
  }
  onSetup() {
    this._media = useMediaContext();
    this.$state.img.set(this._img);
  }
  onConnect() {
    const { src, crossOrigin } = this.$state;
    if (this._img.parentNode !== this) {
      this.prepend(this._img);
    }
    effect(() => {
      setAttribute(this._img, "src", src());
      setAttribute(this._img, "crossorigin", crossOrigin());
    });
  }
  _createImg() {
    return cloneTemplateContent(imgTemplate);
  }
};
_MediaThumbnailElement.tagName = "media-thumbnail";
_MediaThumbnailElement.attrs = {
  crossOrigin: "crossorigin"
};
var MediaThumbnailElement = _MediaThumbnailElement;
var _MediaTimeElement = class _MediaTimeElement extends Host(HTMLElement, Time) {
  onConnect() {
    effect(() => {
      this.textContent = this.$state.timeText();
    });
  }
};
_MediaTimeElement.tagName = "media-time";
var MediaTimeElement = _MediaTimeElement;
var _MediaAirPlayButtonElement = class _MediaAirPlayButtonElement extends Host(HTMLElement, AirPlayButton) {
};
_MediaAirPlayButtonElement.tagName = "media-airplay-button";
var MediaAirPlayButtonElement = _MediaAirPlayButtonElement;
var _MediaCaptionButtonElement = class _MediaCaptionButtonElement extends Host(HTMLElement, CaptionButton) {
};
_MediaCaptionButtonElement.tagName = "media-caption-button";
var MediaCaptionButtonElement = _MediaCaptionButtonElement;
var _MediaFullscreenButtonElement = class _MediaFullscreenButtonElement extends Host(HTMLElement, FullscreenButton) {
};
_MediaFullscreenButtonElement.tagName = "media-fullscreen-button";
var MediaFullscreenButtonElement = _MediaFullscreenButtonElement;
var _MediaLiveButtonElement = class _MediaLiveButtonElement extends Host(HTMLElement, LiveButton) {
};
_MediaLiveButtonElement.tagName = "media-live-button";
var MediaLiveButtonElement = _MediaLiveButtonElement;
var _MediaMuteButtonElement = class _MediaMuteButtonElement extends Host(HTMLElement, MuteButton) {
};
_MediaMuteButtonElement.tagName = "media-mute-button";
var MediaMuteButtonElement = _MediaMuteButtonElement;
var _MediaPIPButtonElement = class _MediaPIPButtonElement extends Host(HTMLElement, PIPButton) {
};
_MediaPIPButtonElement.tagName = "media-pip-button";
var MediaPIPButtonElement = _MediaPIPButtonElement;
var _MediaPlayButtonElement = class _MediaPlayButtonElement extends Host(HTMLElement, PlayButton) {
};
_MediaPlayButtonElement.tagName = "media-play-button";
var MediaPlayButtonElement = _MediaPlayButtonElement;
var _MediaSeekButtonElement = class _MediaSeekButtonElement extends Host(HTMLElement, SeekButton) {
};
_MediaSeekButtonElement.tagName = "media-seek-button";
var MediaSeekButtonElement = _MediaSeekButtonElement;
function renderMenuItemsTemplate(el, onCreate) {
  requestScopedAnimationFrame(() => {
    if (!el.connectScope)
      return;
    const template = el.querySelector("template");
    if (!template)
      return;
    effect(() => {
      var _a;
      if (!((_a = template.content.firstElementChild) == null ? void 0 : _a.localName) && !template.firstElementChild) {
        throw Error("[vidstack] menu items template requires root element");
      }
      const options = el.getOptions();
      cloneTemplate(template, options.length, (radio, i) => {
        const { label, value } = options[i], labelEl = radio.querySelector(`[data-part="label"]`);
        radio.setAttribute("value", value);
        if (labelEl) {
          if (isString(label)) {
            labelEl.textContent = label;
          } else {
            effect(() => {
              labelEl.textContent = label();
            });
          }
        }
        onCreate == null ? void 0 : onCreate(radio, options[i], i);
      });
    });
  });
}
var _MediaAudioRadioGroupElement = class _MediaAudioRadioGroupElement extends Host(HTMLElement, AudioRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
_MediaAudioRadioGroupElement.tagName = "media-audio-radio-group";
var MediaAudioRadioGroupElement = _MediaAudioRadioGroupElement;
var _MediaCaptionsRadioGroupElement = class _MediaCaptionsRadioGroupElement extends Host(HTMLElement, CaptionsRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
_MediaCaptionsRadioGroupElement.tagName = "media-captions-radio-group";
var MediaCaptionsRadioGroupElement = _MediaCaptionsRadioGroupElement;
var _MediaMenuElement = class _MediaMenuElement extends Host(HTMLElement, Menu) {
};
_MediaMenuElement.tagName = "media-menu";
var MediaMenuElement = _MediaMenuElement;
var _MediaMenuButtonElement = class _MediaMenuButtonElement extends Host(HTMLElement, MenuButton) {
};
_MediaMenuButtonElement.tagName = "media-menu-button";
var MediaMenuButtonElement = _MediaMenuButtonElement;
var _MediaMenuItemElement = class _MediaMenuItemElement extends Host(HTMLElement, MenuItem) {
};
_MediaMenuItemElement.tagName = "media-menu-item";
var MediaMenuItemElement = _MediaMenuItemElement;
var _MediaMenuItemsElement = class _MediaMenuItemsElement extends Host(HTMLElement, MenuItems) {
};
_MediaMenuItemsElement.tagName = "media-menu-items";
var MediaMenuItemsElement = _MediaMenuItemsElement;
var _MediaSpeedRadioGroupElement = class _MediaSpeedRadioGroupElement extends Host(HTMLElement, SpeedRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
_MediaSpeedRadioGroupElement.tagName = "media-speed-radio-group";
var MediaSpeedRadioGroupElement = _MediaSpeedRadioGroupElement;
var _MediaQualityRadioGroupElement = class _MediaQualityRadioGroupElement extends Host(HTMLElement, QualityRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const bitrate = option.bitrate, bitrateEl = el.querySelector('[data-part="bitrate"]');
      if (bitrate && bitrateEl) {
        effect(() => {
          bitrateEl.textContent = bitrate() || "";
        });
      }
    });
  }
};
_MediaQualityRadioGroupElement.tagName = "media-quality-radio-group";
var MediaQualityRadioGroupElement = _MediaQualityRadioGroupElement;
var _MediaSliderThumbnailElement = class _MediaSliderThumbnailElement extends MediaThumbnailElement {
  onSetup() {
    super.onSetup();
    this._slider = useState(Slider.state);
  }
  onConnect() {
    super.onConnect();
    effect(this._watchTime.bind(this));
  }
  _watchTime() {
    const { duration, clipStartTime } = this._media.$state;
    this.time = clipStartTime() + this._slider.pointerRate() * duration();
  }
};
_MediaSliderThumbnailElement.tagName = "media-slider-thumbnail";
var MediaSliderThumbnailElement = _MediaSliderThumbnailElement;
var _MediaSliderValueElement = class _MediaSliderValueElement extends Host(HTMLElement, SliderValue) {
  onConnect() {
    effect(() => {
      this.textContent = this.getValueText();
    });
  }
};
_MediaSliderValueElement.tagName = "media-slider-value";
_MediaSliderValueElement.attrs = {
  padMinutes: {
    converter: BOOLEAN
  }
};
var MediaSliderValueElement = _MediaSliderValueElement;
var _MediaTimeSliderElement = class _MediaTimeSliderElement extends Host(HTMLElement, TimeSlider) {
};
_MediaTimeSliderElement.tagName = "media-time-slider";
var MediaTimeSliderElement = _MediaTimeSliderElement;
var _MediaSliderPreviewElement = class _MediaSliderPreviewElement extends Host(HTMLElement, SliderPreview) {
};
_MediaSliderPreviewElement.tagName = "media-slider-preview";
var MediaSliderPreviewElement = _MediaSliderPreviewElement;
var _MediaVolumeSliderElement = class _MediaVolumeSliderElement extends Host(HTMLElement, VolumeSlider) {
};
_MediaVolumeSliderElement.tagName = "media-volume-slider";
var MediaVolumeSliderElement = _MediaVolumeSliderElement;

// node_modules/vidstack/dev/chunks/vidstack-Cts9NVWV.js
var _MediaCaptionsElement = class _MediaCaptionsElement extends Host(HTMLElement, Captions) {
};
_MediaCaptionsElement.tagName = "media-captions";
var MediaCaptionsElement = _MediaCaptionsElement;
var _MediaGestureElement = class _MediaGestureElement extends Host(HTMLElement, Gesture) {
};
_MediaGestureElement.tagName = "media-gesture";
var MediaGestureElement = _MediaGestureElement;
var _MediaAnnouncerElement = class _MediaAnnouncerElement extends Host(HTMLElement, MediaAnnouncer) {
};
_MediaAnnouncerElement.tagName = "media-announcer";
var MediaAnnouncerElement = _MediaAnnouncerElement;
var _MediaControlsElement = class _MediaControlsElement extends Host(HTMLElement, Controls) {
};
_MediaControlsElement.tagName = "media-controls";
var MediaControlsElement = _MediaControlsElement;
var _MediaControlsGroupElement = class _MediaControlsGroupElement extends Host(HTMLElement, ControlsGroup) {
};
_MediaControlsGroupElement.tagName = "media-controls-group";
var MediaControlsGroupElement = _MediaControlsGroupElement;
var Title = class extends Component {
};
var _MediaTitleElement = class _MediaTitleElement extends Host(HTMLElement, Title) {
  onSetup() {
    this._media = useMediaContext();
  }
  onConnect() {
    effect(this._watchTitle.bind(this));
  }
  _watchTitle() {
    const { title } = this._media.$state;
    this.textContent = title();
  }
};
_MediaTitleElement.tagName = "media-title";
var MediaTitleElement = _MediaTitleElement;
var _ChapterTitle = class _ChapterTitle extends Component {
};
_ChapterTitle.props = {
  defaultText: ""
};
var ChapterTitle = _ChapterTitle;
var _MediaChapterTitleElement = class _MediaChapterTitleElement extends Host(HTMLElement, ChapterTitle) {
  onSetup() {
    this._media = useMediaContext();
    this._chapterTitle = signal("");
  }
  onConnect() {
    const tracks = this._media.textTracks;
    watchCueTextChange(tracks, "chapters", this._chapterTitle.set);
    effect(this._watchChapterTitle.bind(this));
  }
  _watchChapterTitle() {
    const { defaultText } = this.$props;
    this.textContent = this._chapterTitle() || defaultText();
  }
};
_MediaChapterTitleElement.tagName = "media-chapter-title";
var MediaChapterTitleElement = _MediaChapterTitleElement;
var _Spinner = class _Spinner extends Component {
  onConnect(el) {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope)
        return;
      const root = el.querySelector("svg"), track = root.firstElementChild, trackFill = track.nextElementSibling;
      effect(this._update.bind(this, root, track, trackFill));
    });
  }
  _update(root, track, trackFill) {
    const { size, trackWidth, fillPercent } = this.$props;
    setAttribute(root, "width", size());
    setAttribute(root, "height", size());
    setAttribute(track, "stroke-width", trackWidth());
    setAttribute(trackFill, "stroke-width", trackWidth());
    setAttribute(trackFill, "stroke-dashoffset", 100 - fillPercent());
  }
};
_Spinner.props = {
  size: 96,
  trackWidth: 8,
  fillPercent: 50
};
var Spinner = _Spinner;
var _MediaSpinnerElement = class _MediaSpinnerElement extends Host(LitElement, Spinner) {
  render() {
    return html`
      <svg fill="none" viewBox="0 0 120 120" aria-hidden="true" data-part="root">
        <circle cx="60" cy="60" r="54" stroke="currentColor" data-part="track"></circle>
        <circle
          cx="60"
          cy="60"
          r="54"
          stroke="currentColor"
          pathLength="100"
          stroke-dasharray="100"
          data-part="track-fill"
        ></circle>
      </svg>
    `;
  }
};
_MediaSpinnerElement.tagName = "media-spinner";
var MediaSpinnerElement = _MediaSpinnerElement;
var _MediaLayout = class _MediaLayout extends Component {
};
_MediaLayout.props = {
  when: false
};
var MediaLayout = _MediaLayout;
var _MediaLayoutElement = class _MediaLayoutElement extends Host(HTMLElement, MediaLayout) {
  onSetup() {
    this._media = useMediaContext();
  }
  onConnect() {
    effect(this._watchWhen.bind(this));
  }
  _watchWhen() {
    const root = this.firstElementChild, isTemplate = (root == null ? void 0 : root.localName) === "template", when = this.$props.when(), matches = isBoolean(when) ? when : computed(() => when(this._media.player.state))();
    if (!matches) {
      if (isTemplate) {
        this.textContent = "";
        this.appendChild(root);
      } else if (isHTMLElement(root)) {
        root.style.display = "none";
      }
      return;
    }
    if (isTemplate) {
      this.append(root.content.cloneNode(true));
    } else if (isHTMLElement(root)) {
      root.style.display = "";
    }
  }
};
_MediaLayoutElement.tagName = "media-layout";
var MediaLayoutElement = _MediaLayoutElement;
var _MediaGoogleCastButtonElement = class _MediaGoogleCastButtonElement extends Host(HTMLElement, GoogleCastButton) {
};
_MediaGoogleCastButtonElement.tagName = "media-google-cast-button";
var MediaGoogleCastButtonElement = _MediaGoogleCastButtonElement;
var _MediaToggleButtonElement = class _MediaToggleButtonElement extends Host(HTMLElement, ToggleButton) {
};
_MediaToggleButtonElement.tagName = "media-toggle-button";
var MediaToggleButtonElement = _MediaToggleButtonElement;
var _MediaTooltipElement = class _MediaTooltipElement extends Host(HTMLElement, Tooltip) {
};
_MediaTooltipElement.tagName = "media-tooltip";
var MediaTooltipElement = _MediaTooltipElement;
var _MediaTooltipTriggerElement = class _MediaTooltipTriggerElement extends Host(HTMLElement, TooltipTrigger) {
  onConnect() {
    this.style.display = "contents";
  }
};
_MediaTooltipTriggerElement.tagName = "media-tooltip-trigger";
var MediaTooltipTriggerElement = _MediaTooltipTriggerElement;
var _MediaTooltipContentElement = class _MediaTooltipContentElement extends Host(HTMLElement, TooltipContent) {
};
_MediaTooltipContentElement.tagName = "media-tooltip-content";
var MediaTooltipContentElement = _MediaTooltipContentElement;
var _MediaMenuPortalElement = class _MediaMenuPortalElement extends Host(HTMLElement, MenuPortal) {
};
_MediaMenuPortalElement.tagName = "media-menu-portal";
_MediaMenuPortalElement.attrs = {
  disabled: {
    converter(value) {
      if (isString(value))
        return value;
      return value !== null;
    }
  }
};
var MediaMenuPortalElement = _MediaMenuPortalElement;
var _MediaChaptersRadioGroupElement = class _MediaChaptersRadioGroupElement extends Host(HTMLElement, ChaptersRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const { cue, startTime, duration } = option, thumbnailEl = el.querySelector(".vds-thumbnail,media-thumbnail"), startEl = el.querySelector('[data-part="start-time"]'), durationEl = el.querySelector('[data-part="duration"]');
      if (startEl)
        startEl.textContent = startTime;
      if (durationEl)
        durationEl.textContent = duration;
      if (thumbnailEl) {
        thumbnailEl.setAttribute("time", cue.startTime + "");
        effect(() => {
          const thumbnails = this.$props.thumbnails();
          if ("src" in thumbnailEl) {
            thumbnailEl.src = thumbnails;
          } else if (isString(thumbnails)) {
            thumbnailEl.setAttribute("src", thumbnails);
          }
        });
      }
    });
  }
};
_MediaChaptersRadioGroupElement.tagName = "media-chapters-radio-group";
var MediaChaptersRadioGroupElement = _MediaChaptersRadioGroupElement;
var _MediaAudioGainRadioGroupElement = class _MediaAudioGainRadioGroupElement extends Host(HTMLElement, AudioGainRadioGroup) {
  onConnect() {
    renderMenuItemsTemplate(this);
  }
};
_MediaAudioGainRadioGroupElement.tagName = "media-audio-gain-radio-group";
var MediaAudioGainRadioGroupElement = _MediaAudioGainRadioGroupElement;
var _MediaRadioElement = class _MediaRadioElement extends Host(HTMLElement, Radio) {
};
_MediaRadioElement.tagName = "media-radio";
var MediaRadioElement = _MediaRadioElement;
var _MediaRadioGroupElement = class _MediaRadioGroupElement extends Host(HTMLElement, RadioGroup) {
};
_MediaRadioGroupElement.tagName = "media-radio-group";
var MediaRadioGroupElement = _MediaRadioGroupElement;
var _MediaSliderElement = class _MediaSliderElement extends Host(HTMLElement, Slider) {
};
_MediaSliderElement.tagName = "media-slider";
var MediaSliderElement = _MediaSliderElement;
var videoTemplate = createTemplate(
  `<video muted playsinline preload="none" style="max-width: unset;"></video>`
);
var _MediaSliderVideoElement = class _MediaSliderVideoElement extends Host(HTMLElement, SliderVideo) {
  constructor() {
    super(...arguments);
    this._video = this._createVideo();
  }
  onSetup() {
    this._media = useMediaContext();
    this.$state.video.set(this._video);
  }
  onConnect() {
    const { canLoad } = this._media.$state, { src, crossOrigin } = this.$state;
    if (this._video.parentNode !== this) {
      this.prepend(this._video);
    }
    effect(() => {
      setAttribute(this._video, "crossorigin", crossOrigin());
      setAttribute(this._video, "preload", canLoad() ? "auto" : "none");
      setAttribute(this._video, "src", src());
    });
  }
  _createVideo() {
    return cloneTemplateContent(videoTemplate);
  }
};
_MediaSliderVideoElement.tagName = "media-slider-video";
var MediaSliderVideoElement = _MediaSliderVideoElement;
var _MediaAudioGainSliderElement = class _MediaAudioGainSliderElement extends Host(HTMLElement, AudioGainSlider) {
};
_MediaAudioGainSliderElement.tagName = "media-audio-gain-slider";
var MediaAudioGainSliderElement = _MediaAudioGainSliderElement;
var _MediaSpeedSliderElement = class _MediaSpeedSliderElement extends Host(HTMLElement, SpeedSlider) {
};
_MediaSpeedSliderElement.tagName = "media-speed-slider";
var MediaSpeedSliderElement = _MediaSpeedSliderElement;
var _MediaQualitySliderElement = class _MediaQualitySliderElement extends Host(HTMLElement, QualitySlider) {
};
_MediaQualitySliderElement.tagName = "media-quality-slider";
var MediaQualitySliderElement = _MediaQualitySliderElement;
var _MediaSliderChaptersElement = class _MediaSliderChaptersElement extends Host(HTMLElement, SliderChapters) {
  constructor() {
    super(...arguments);
    this._template = null;
  }
  onConnect() {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope)
        return;
      const template = this.querySelector("template");
      if (template) {
        this._template = template;
        effect(this._renderTemplate.bind(this));
      }
    });
  }
  _renderTemplate() {
    if (!this._template)
      return;
    const elements = cloneTemplate(this._template, this.cues.length || 1);
    this.setRefs(elements);
  }
};
_MediaSliderChaptersElement.tagName = "media-slider-chapters";
var MediaSliderChaptersElement = _MediaSliderChaptersElement;
var SliderSteps = class extends Component {
};
var _MediaSliderStepsElement = class _MediaSliderStepsElement extends Host(HTMLElement, SliderSteps) {
  constructor() {
    super(...arguments);
    this._template = null;
  }
  onConnect(el) {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope)
        return;
      this._template = el.querySelector("template");
      if (this._template)
        effect(this._render.bind(this));
    });
  }
  _render() {
    if (!this._template)
      return;
    const { min, max, step } = useState(sliderState), steps = (max() - min()) / step();
    cloneTemplate(this._template, Math.floor(steps) + 1);
  }
};
_MediaSliderStepsElement.tagName = "media-slider-steps";
var MediaSliderStepsElement = _MediaSliderStepsElement;

// node_modules/vidstack/dev/chunks/vidstack-CWk48RFI.js
var _MediaPosterElement = class _MediaPosterElement extends Host(HTMLElement, Poster) {
  constructor() {
    super(...arguments);
    this._img = document.createElement("img");
  }
  onSetup() {
    this.$state.img.set(this._img);
  }
  onConnect() {
    const { src, alt, crossOrigin } = this.$state;
    if (this._img.parentNode !== this) {
      this.prepend(this._img);
    }
    effect(() => {
      setAttribute(this._img, "alt", alt());
      setAttribute(this._img, "crossorigin", crossOrigin());
      setAttribute(this._img, "src", src() || "");
    });
    effect(() => {
      const { loading, hidden } = this.$state;
      this._img.style.display = loading() || hidden() ? "none" : "";
    });
  }
};
_MediaPosterElement.tagName = "media-poster";
_MediaPosterElement.attrs = {
  crossOrigin: "crossorigin"
};
var MediaPosterElement = _MediaPosterElement;

export {
  MediaThumbnailElement,
  MediaTimeElement,
  MediaAirPlayButtonElement,
  MediaCaptionButtonElement,
  MediaFullscreenButtonElement,
  MediaLiveButtonElement,
  MediaMuteButtonElement,
  MediaPIPButtonElement,
  MediaPlayButtonElement,
  MediaSeekButtonElement,
  MediaAudioRadioGroupElement,
  MediaCaptionsRadioGroupElement,
  MediaMenuElement,
  MediaMenuButtonElement,
  MediaMenuItemElement,
  MediaMenuItemsElement,
  MediaSpeedRadioGroupElement,
  MediaQualityRadioGroupElement,
  MediaSliderThumbnailElement,
  MediaSliderValueElement,
  MediaTimeSliderElement,
  MediaSliderPreviewElement,
  MediaVolumeSliderElement,
  MediaCaptionsElement,
  MediaGestureElement,
  MediaAnnouncerElement,
  MediaControlsElement,
  MediaControlsGroupElement,
  MediaTitleElement,
  MediaChapterTitleElement,
  MediaSpinnerElement,
  MediaLayoutElement,
  MediaGoogleCastButtonElement,
  MediaToggleButtonElement,
  MediaTooltipElement,
  MediaTooltipTriggerElement,
  MediaTooltipContentElement,
  MediaMenuPortalElement,
  MediaChaptersRadioGroupElement,
  MediaAudioGainRadioGroupElement,
  MediaRadioElement,
  MediaRadioGroupElement,
  MediaSliderElement,
  MediaSliderVideoElement,
  MediaAudioGainSliderElement,
  MediaSpeedSliderElement,
  MediaQualitySliderElement,
  MediaSliderChaptersElement,
  MediaSliderStepsElement,
  MediaPosterElement
};
//# sourceMappingURL=chunk-NXVT275M.js.map
