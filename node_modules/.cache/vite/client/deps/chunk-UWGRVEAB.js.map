{
  "version": 3,
  "sources": ["../../../../vidstack/dev/chunks/vidstack-C2NQ3nXZ.js"],
  "sourcesContent": ["import { l as listen } from './vidstack-CCzOi1rX.js';\n\nfunction getCastFrameworkURL() {\n  return \"https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1\";\n}\nfunction hasLoadedCastFramework() {\n  return !!window.cast?.framework;\n}\nfunction isCastAvailable() {\n  return !!window.chrome?.cast?.isAvailable;\n}\nfunction isCastConnected() {\n  return getCastContext().getCastState() === cast.framework.CastState.CONNECTED;\n}\nfunction getCastContext() {\n  return window.cast.framework.CastContext.getInstance();\n}\nfunction getCastSession() {\n  return getCastContext().getCurrentSession();\n}\nfunction getCastSessionMedia() {\n  return getCastSession()?.getSessionObj().media[0];\n}\nfunction hasActiveCastSession(src) {\n  const contentId = getCastSessionMedia()?.media.contentId;\n  return contentId === src?.src;\n}\nfunction getDefaultCastOptions() {\n  return {\n    language: \"en-US\",\n    autoJoinPolicy: chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED,\n    receiverApplicationId: chrome.cast.media.DEFAULT_MEDIA_RECEIVER_APP_ID,\n    resumeSavedSession: true,\n    androidReceiverCompatible: true\n  };\n}\nfunction getCastErrorMessage(code) {\n  const defaultMessage = `Google Cast Error Code: ${code}`;\n  {\n    switch (code) {\n      case chrome.cast.ErrorCode.API_NOT_INITIALIZED:\n        return \"The API is not initialized.\";\n      case chrome.cast.ErrorCode.CANCEL:\n        return \"The operation was canceled by the user\";\n      case chrome.cast.ErrorCode.CHANNEL_ERROR:\n        return \"A channel to the receiver is not available.\";\n      case chrome.cast.ErrorCode.EXTENSION_MISSING:\n        return \"The Cast extension is not available.\";\n      case chrome.cast.ErrorCode.INVALID_PARAMETER:\n        return \"The parameters to the operation were not valid.\";\n      case chrome.cast.ErrorCode.RECEIVER_UNAVAILABLE:\n        return \"No receiver was compatible with the session request.\";\n      case chrome.cast.ErrorCode.SESSION_ERROR:\n        return \"A session could not be created, or a session was invalid.\";\n      case chrome.cast.ErrorCode.TIMEOUT:\n        return \"The operation timed out.\";\n      default:\n        return defaultMessage;\n    }\n  }\n}\nfunction listenCastContextEvent(type, handler) {\n  return listen(getCastContext(), type, handler);\n}\n\nexport { getCastSession as a, isCastAvailable as b, getCastErrorMessage as c, getDefaultCastOptions as d, getCastFrameworkURL as e, getCastSessionMedia as f, getCastContext as g, hasLoadedCastFramework as h, isCastConnected as i, hasActiveCastSession as j, listenCastContextEvent as l };\n"],
  "mappings": ";;;;;AAEA,SAAS,sBAAsB;AAC7B,SAAO;AACT;AACA,SAAS,yBAAyB;AALlC;AAME,SAAO,CAAC,GAAC,YAAO,SAAP,mBAAa;AACxB;AACA,SAAS,kBAAkB;AAR3B;AASE,SAAO,CAAC,GAAC,kBAAO,WAAP,mBAAe,SAAf,mBAAqB;AAChC;AACA,SAAS,kBAAkB;AACzB,SAAO,eAAe,EAAE,aAAa,MAAM,KAAK,UAAU,UAAU;AACtE;AACA,SAAS,iBAAiB;AACxB,SAAO,OAAO,KAAK,UAAU,YAAY,YAAY;AACvD;AACA,SAAS,iBAAiB;AACxB,SAAO,eAAe,EAAE,kBAAkB;AAC5C;AACA,SAAS,sBAAsB;AApB/B;AAqBE,UAAO,oBAAe,MAAf,mBAAkB,gBAAgB,MAAM;AACjD;AACA,SAAS,qBAAqB,KAAK;AAvBnC;AAwBE,QAAM,aAAY,yBAAoB,MAApB,mBAAuB,MAAM;AAC/C,SAAO,eAAc,2BAAK;AAC5B;AACA,SAAS,wBAAwB;AAC/B,SAAO;AAAA,IACL,UAAU;AAAA,IACV,gBAAgB,OAAO,KAAK,eAAe;AAAA,IAC3C,uBAAuB,OAAO,KAAK,MAAM;AAAA,IACzC,oBAAoB;AAAA,IACpB,2BAA2B;AAAA,EAC7B;AACF;AACA,SAAS,oBAAoB,MAAM;AACjC,QAAM,iBAAiB,2BAA2B,IAAI;AACtD;AACE,YAAQ,MAAM;AAAA,MACZ,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT,KAAK,OAAO,KAAK,UAAU;AACzB,eAAO;AAAA,MACT;AACE,eAAO;AAAA,IACX;AAAA,EACF;AACF;AACA,SAAS,uBAAuB,MAAM,SAAS;AAC7C,SAAO,OAAO,eAAe,GAAG,MAAM,OAAO;AAC/C;",
  "names": []
}
