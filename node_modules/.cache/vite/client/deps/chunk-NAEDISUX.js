import {
  MediaPlayer,
  MediaProvider
} from "./chunk-KJ5HVKEK.js";
import {
  useMediaContext
} from "./chunk-2UFRPTHX.js";
import {
  Host,
  computed,
  effect,
  setAttribute
} from "./chunk-2H3ESF2I.js";

// node_modules/vidstack/dev/chunks/vidstack-MEtfBj9Q.js
var _MediaProviderElement = class _MediaProviderElement extends Host(HTMLElement, MediaProvider) {
  constructor() {
    super(...arguments);
    this._target = null;
    this._blocker = null;
  }
  onSetup() {
    this._media = useMediaContext();
    this.setAttribute("keep-alive", "");
  }
  onDestroy() {
    var _a, _b;
    (_a = this._blocker) == null ? void 0 : _a.remove();
    this._blocker = null;
    (_b = this._target) == null ? void 0 : _b.remove();
    this._target = null;
  }
  onConnect() {
    effect(() => {
      var _a, _b, _c;
      const loader = this.$state.loader(), isYouTubeEmbed = (loader == null ? void 0 : loader.name) === "youtube", isVimeoEmbed = (loader == null ? void 0 : loader.name) === "vimeo", isEmbed = isYouTubeEmbed || isVimeoEmbed, isGoogleCast = (loader == null ? void 0 : loader.name) === "google-cast";
      const target = loader ? isGoogleCast ? this._createGoogleCastContainer() : isEmbed ? this._createIFrame() : loader.mediaType() === "audio" ? this._createAudio() : this._createVideo() : null;
      if (this._target !== target) {
        const parent = ((_a = this._target) == null ? void 0 : _a.parentElement) ?? this;
        (_b = this._target) == null ? void 0 : _b.remove();
        this._target = target;
        if (target)
          parent.prepend(target);
        if (isEmbed && target) {
          effect(() => {
            var _a2;
            const { nativeControls, viewType } = this._media.$state, showNativeControls = nativeControls(), isAudioView = viewType() === "audio", showBlocker = showNativeControls && !isAudioView;
            if (showBlocker) {
              this._blocker = this.querySelector(".vds-blocker");
              if (!this._blocker) {
                this._blocker = document.createElement("div");
                this._blocker.classList.add("vds-blocker");
                target.after(this._blocker);
              }
            } else {
              (_a2 = this._blocker) == null ? void 0 : _a2.remove();
              this._blocker = null;
            }
            setAttribute(target, "data-no-controls", !showNativeControls);
          });
        }
      }
      if (isYouTubeEmbed)
        target == null ? void 0 : target.classList.add("vds-youtube");
      else if (isVimeoEmbed)
        target == null ? void 0 : target.classList.add("vds-vimeo");
      if (!isEmbed) {
        (_c = this._blocker) == null ? void 0 : _c.remove();
        this._blocker = null;
      }
      this.load(target);
    });
  }
  _createAudio() {
    const audio = this._target instanceof HTMLAudioElement ? this._target : document.createElement("audio");
    setAttribute(audio, "preload", "none");
    setAttribute(audio, "aria-hidden", "true");
    const { controls, crossOrigin } = this._media.$state;
    effect(() => {
      setAttribute(audio, "controls", controls());
      setAttribute(audio, "crossorigin", crossOrigin());
    });
    return audio;
  }
  _createVideo() {
    const video = this._target instanceof HTMLVideoElement ? this._target : document.createElement("video");
    const { crossOrigin, poster, nativeControls } = this._media.$state, $controls = computed(() => nativeControls() ? "true" : null), $poster = computed(() => poster() && nativeControls() ? poster() : null);
    effect(() => {
      setAttribute(video, "controls", $controls());
      setAttribute(video, "crossorigin", crossOrigin());
      setAttribute(video, "poster", $poster());
    });
    return video;
  }
  _createIFrame() {
    const iframe = this._target instanceof HTMLIFrameElement ? this._target : document.createElement("iframe"), { nativeControls } = this._media.$state;
    effect(() => setAttribute(iframe, "tabindex", !nativeControls() ? -1 : null));
    return iframe;
  }
  _createGoogleCastContainer() {
    var _a;
    if ((_a = this._target) == null ? void 0 : _a.classList.contains("vds-google-cast")) {
      return this._target;
    }
    const container = document.createElement("div");
    container.classList.add("vds-google-cast");
    import("./vidstack-Ij-cPHV8-SAYUPTEW.js").then(({ insertContent }) => {
      insertContent(container, this._media.$state);
    });
    return container;
  }
};
_MediaProviderElement.tagName = "media-provider";
var MediaProviderElement = _MediaProviderElement;
var _MediaPlayerElement = class _MediaPlayerElement extends Host(HTMLElement, MediaPlayer) {
};
_MediaPlayerElement.tagName = "media-player";
_MediaPlayerElement.attrs = {
  autoPlay: "autoplay",
  crossOrigin: "crossorigin",
  playsInline: "playsinline",
  preferNativeHLS: "prefer-native-hls",
  minLiveDVRWindow: "min-live-dvr-window"
};
var MediaPlayerElement = _MediaPlayerElement;

export {
  MediaProviderElement,
  MediaPlayerElement
};
//# sourceMappingURL=chunk-NAEDISUX.js.map
