/*!
 *  @preserve
 *  
 *  @module     iframe-resizer/vue 5.1.4 (cjs) - 2024-06-25
 *
 *  @license    GPL-3.0 for non-commercial use only.
 *              For commercial use, you must purchase a license from
 *              https://iframe-resizer.com/pricing
 * 
 *  @desciption Keep same and cross domain iFrames sized to their content 
 *
 *  @author     David J. Bradshaw <info@iframe-resizer.com>
 * 
 *  @see        {@link https://iframe-resizer.com}
 * 
 *  @copyright  (c) 2013 - 2024, David J. Bradshaw. All rights reserved.
 */


'use strict';

const connectResizer = require('@iframe-resizer/core');
const vue = require('vue');

const script = {
    name: 'IframeResizer',

    props: {
      license: {
        type: String,
        required: true
      },
      bodyBackground: {
        type: String,
      },
      bodyMargin: {
        type: String,
      },
      bodyPadding: {
        type: String,
      },
      checkOrigin: {
        type: Boolean,
        default: true,
      },
      direction: {
        type: String,
      },
      inPageLinks: {
        type: Boolean,
      },
      offset: {
        type: Number,
      },
      scrolling: {
        type: Boolean,
      },
      tolerance: {
        type: Number,
      },
      warningTimeout: {
        type: Number,
      },
    },
    
    mounted() {
      const self = this;
      const { iframe } = this.$refs;
      const options = {
        ...Object.fromEntries(
          Object
            .entries(this.$props)
            .filter(([key, value]) => value !== undefined)
        ),
        waitForLoad: true,

        onClosed: () => false, // Disable close methods, use Vue to remove iframe
        onReady: (...args) => self.$emit('onReady', ...args),
        onMessage: (...args) => self.$emit('onMessage', ...args),
        onResized: (...args) => self.$emit('onResized', ...args),
      };

      const connectWithOptions = connectResizer(options);

      self.resizer = connectWithOptions(iframe);
    },
    
    beforeUnmount() {
      this.resizer?.disconnect();
    },

    methods: {
      moveToAnchor(anchor) {
        this.resizer.moveToAnchor(anchor);
      },
      resize() {
        this.resizer.resize();
      },
      sendMessage(msg, target) {
        this.resizer.sendMessage(msg, target);
      },
    },
  };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  return (vue.openBlock(), vue.createElementBlock("iframe", vue.mergeProps({ ref: "iframe" }, _ctx.$attrs), null, 16 /* FULL_PROPS */))
}

script.render = render;
script.__file = "./iframe-resizer.vue";

const index = {
  install(Vue) {
    Vue.component('IframeResizer', script);
  },
};

module.exports = index;
